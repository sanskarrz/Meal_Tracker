diff --git a/frontend/app/(tabs)/add.tsx b/frontend/app/(tabs)/add.tsx
index b21641d..f8884b2 100644
--- a/frontend/app/(tabs)/add.tsx
+++ b/frontend/app/(tabs)/add.tsx
@@ -15,13 +15,13 @@ import { LinearGradient } from 'expo-linear-gradient';
 import { Ionicons } from '@expo/vector-icons';
 import { useAuth } from '../../contexts/AuthContext';
 import axios from 'axios';
-import Constants from 'expo-constants';
 
-const API_URL = Constants.expoConfig?.extra?.backendUrl || process.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';
+const API_URL = '';
 
 export default function AddScreen() {
   const [mode, setMode] = useState<'manual' | 'recipe'>('manual');
   const [foodName, setFoodName] = useState('');
+  const [servingSize, setServingSize] = useState('1 serving');
   const [recipeText, setRecipeText] = useState('');
   const [loading, setLoading] = useState(false);
   const { token } = useAuth();
@@ -36,18 +36,19 @@ export default function AddScreen() {
     try {
       const response = await axios.post(
         `${API_URL}/api/food/manual`,
-        { food_name: foodName },
+        { food_name: foodName, serving_size: servingSize },
         { headers: { Authorization: `Bearer ${token}` } }
       );
 
       Alert.alert(
         'Food Added!',
-        `${response.data.food_name}\nCalories: ${response.data.calories}\nProtein: ${response.data.protein}g\nCarbs: ${response.data.carbs}g\nFats: ${response.data.fats}g`,
+        `${response.data.food_name}\n${response.data.serving_size || ''}\nCalories: ${response.data.calories}\nProtein: ${response.data.protein}g\nCarbs: ${response.data.carbs}g\nFats: ${response.data.fats}g`,
         [
           {
             text: 'OK',
             onPress: () => {
               setFoodName('');
+              setServingSize('1 serving');
             },
           },
         ]
@@ -143,6 +144,17 @@ export default function AddScreen() {
                 />
               </View>
 
+              <View style={styles.inputContainer}>
+                <Ionicons name="scale-outline" size={20} color="#36B37E" />
+                <TextInput
+                  style={styles.input}
+                  placeholder="Serving size (e.g., '1 cup', '100g', '1 medium')"
+                  value={servingSize}
+                  onChangeText={setServingSize}
+                  placeholderTextColor="#999"
+                />
+              </View>
+
               <TouchableOpacity
                 style={[styles.submitButton, loading && styles.submitButtonDisabled]}
                 onPress={addManualFood}
diff --git a/model.patch b/model.patch
index 1574662..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,141 +0,0 @@
-diff --git a/test_result.md b/test_result.md
-index 187cba4..e2925b3 100644
---- a/test_result.md
-+++ b/test_result.md
-@@ -100,4 +100,133 @@
- 
- #====================================================================================================
- # Testing Data - Main Agent and testing sub agent both should log testing data below this section
--#====================================================================================================
-\ No newline at end of file
-+#====================================================================================================
-+
-+user_problem_statement: "Test the Healthism Calorie Tracker API thoroughly - Authentication Flow, Food Analysis Features, Food History, Food Entry Management, and Gemini AI Integration"
-+
-+backend:
-+  - task: "Authentication Flow"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Comprehensive authentication testing completed successfully. User registration (✅), login (✅), token validation (✅), and protected endpoint access (✅) all working correctly. JWT tokens are properly generated and validated."
-+
-+  - task: "Manual Food Entry"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Manual food entry via POST /api/food/manual working perfectly. Successfully analyzed 'grilled chicken breast' and returned accurate nutritional data (165 calories, complete macros). Gemini AI integration functioning correctly."
-+
-+  - task: "Image Analysis"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Image analysis via POST /api/food/analyze-image working correctly. Successfully processed base64 image input and returned nutritional analysis. Gemini Vision API integration is functional."
-+
-+  - task: "Recipe Analysis"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Recipe analysis via POST /api/food/analyze-recipe working excellently. Successfully analyzed complex recipe (quinoa black bean avocado salad) and calculated total nutritional information (1040 calories). AI provides comprehensive analysis."
-+
-+  - task: "Food History Management"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "All food history endpoints working perfectly. GET /api/food/today (✅), GET /api/food/history with date parameter (✅), and GET /api/stats/daily (✅) all return proper JSON responses with correct data structure."
-+
-+  - task: "Food Entry Management"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Food entry deletion via DELETE /api/food/{entry_id} working correctly. Successfully deleted test entry and returned proper confirmation message. User authorization properly enforced."
-+
-+  - task: "Daily Statistics Calculation"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Daily stats calculation working accurately. Properly aggregates total calories (1228), protein, carbs, fats, entry count (3), and calculates remaining calories against daily goal. All mathematical operations correct."
-+
-+  - task: "Gemini AI Integration"
-+    implemented: true
-+    working: true
-+    file: "backend/server.py"
-+    stuck_count: 0
-+    priority: "high"
-+    needs_retesting: false
-+    status_history:
-+        - working: true
-+          agent: "testing"
-+          comment: "Gemini AI integration working excellently. Tested with multiple foods (banana: 105 cal, apple: 95 cal, rice: 130 cal) - all within expected ranges. Provides complete nutritional data including protein, carbs, and fats. High accuracy and reliability."
-+
-+frontend:
-+  - task: "Frontend Integration"
-+    implemented: false
-+    working: "NA"
-+    file: "frontend/src/App.js"
-+    stuck_count: 0
-+    priority: "medium"
-+    needs_retesting: false
-+    status_history:
-+        - working: "NA"
-+          agent: "testing"
-+          comment: "Frontend testing not performed as per testing agent limitations. Backend APIs are fully functional and ready for frontend integration."
-+
-+metadata:
-+  created_by: "testing_agent"
-+  version: "1.0"
-+  test_sequence: 1
-+  run_ui: false
-+
-+test_plan:
-+  current_focus:
-+    - "All backend tasks completed successfully"
-+  stuck_tasks: []
-+  test_all: true
-+  test_priority: "high_first"
-+
-+agent_communication:
-+    - agent: "testing"
-+      message: "Comprehensive backend testing completed successfully. All 19 tests passed with 0 failures and 0 warnings. Authentication flow, food analysis features (manual, image, recipe), food history management, entry deletion, daily statistics, and Gemini AI integration are all working perfectly. The API is production-ready for the Healthism Calorie Tracker application. Backend URL configuration (http://localhost:8001/api) is properly set up and all endpoints are responding correctly."
-\ No newline at end of file
